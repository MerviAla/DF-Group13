import machine
from machine import Pin, PWM
import utime

# GPIO-pinnit
motor_front_in1 = Pin(0, Pin.OUT)
motor_front_in2 = Pin(1, Pin.OUT)
motor_rear_in3 = Pin(2, Pin.OUT)
motor_rear_in4 = Pin(3, Pin.OUT)

trigger = Pin(7, Pin.OUT)
echo = Pin(8, Pin.IN)

buzzer = PWM(Pin(4))
switch = Pin(5, Pin.IN, Pin.PULL_UP)

#variables, esimerkkiaika
alarm_time = "12:00"
is_alarm_active = False

#ultrasonic sensor
def get_distance():
    trigger.low()
    utime.sleep_us(2)
    trigger.high()
    utime.sleep_us(10)
    trigger.low()
    
    start = utime.ticks_us()
    while echo.value() == 0:
        if utime.ticks_diff(utime.ticks_us(), start) > 30000:  # Aikakatkaisu 30ms
            return -1  # Virhe: Ei signaalia

    start = utime.ticks_us()
    while echo.value() == 1:
        if utime.ticks_diff(utime.ticks_us(), start) > 30000:  # Aikakatkaisu 30ms
            return -1  # Virhe: Liian pitkä signaali

    duration = utime.ticks_diff(utime.ticks_us(), start)
    return (duration * 0.0343) / 2  # Palauttaa etäisyyden cm


#setting alarm
def set_alarm(time):
    global alarm_time
    alarm_time = time
    print("Alarm set for: ", alarm_time)

# Motor control functions
def stop_motor():
    motor_front_in1.value(0)
    motor_front_in2.value(0)
    motor_rear_in3.value(0)
    motor_rear_in4.value(0)

def move_forward():
    motor_front_in1.value(1)
    motor_front_in2.value(0)
    motor_rear_in3.value(0)
    motor_rear_in4.value(0)

def turn_left():
    print("Turning left")
    motor_front_in1.value(1)
    motor_front_in2.value(0)
    motor_rear_in3.value(1)
    motor_rear_in4.value(0)
    utime.sleep(0.5)
    stop_motor()
    
def turn_right():
    print("Turning right")
    motor_front_in1.value(1)
    motor_front_in2.value(0)
    motor_rear_in3.value(0)
    motor_rear_in4.value(1)
    utime_sleep(0.5)
    stop_motor()

# Sound buzzer
def play_buzzer():
    buzzer.freq(1000)  # Taajuus (Hz)
    buzzer.duty_u16(2000)  # Äänenvoimakkuus
    utime.sleep(0.5)
    buzzer.duty_u16(0)  # Sammuta ääni

# Alarm logic
def alarm():
    global is_alarm_active
    is_alarm_active = True
    print("Alarm activated!")
    while is_alarm_active:
        move_forward()
        play_buzzer()

        # Check for obstacles
        distance = get_distance()
        if distance < 20:
            print("Object detected")
            stop_motor()
            utime.sleep(0.2)
            turn_left()
            distance = get_distance()
            if distance >= 20:
                turn_right()
                move_forward()
                print("moving forward")
        
        if distance == -1:
            print("Ultrasonic sensor error: No signal")

        # Check button to deactivate alarm
        if switch.value() == 0:
            stop_motor()
            buzzer.duty_u16(0)
            is_alarm_active = False
            print("Alarm deactivated!")

def check_time():
    t = utime.localtime()
    return "{:02}:{:02}:{:02}".format(t[3], t[4], t[5])

current_time = check_time()

# Main Loop
def main():
    global alarm_time
    while True:
        current_time = check_time()
        if current_time == alarm_time:
            alarm()
            utime.sleep(1)
            
set_alarm("11:36:00")
main()  # Run main loop
#stop_motor()
