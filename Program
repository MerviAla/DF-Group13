import machine
import time

# GPIO-pinnit
led_red = machine.Pin(xx, machine.Pin.OUT)
buzzer = machine.PWM(machine.Pin(xx))
button = machine.Pin(xx, machine.Pin.IN, machine.Pin.PULL_UP)

TRIG = machine.Pin(xx, machine.PinOUT)
ECHO = machine.Pin(xx, machine.Pin.IN)

# Moottorin käynnistäminen
def start_motor():
    motor.value(1)

# Moottorin pysäyttäminen
def stop_motor():
    motor.value(0)

# Motor control functions
def stop_motor():
    motor_in1.value(0)
    motor_in2.value(0)

def move_forward():
    motor_in1.value(1)
    motor_in2.value(0)

def turn_left():
    motor_in1.value(0)
    motor_in2.value(1)
    time.sleep(1)  # Turn for 1 second
    stop_motor()    

# Buzzerin ääni
def play_buzzer():
    buzzer.freq(1000)  # Taajuus (Hz)
    buzzer.duty_u16(5000)  # Äänenvoimakkuus
    time.sleep(0.5)
    buzzer.duty_u16(0)  # Sammuta ääni

# Herätyslogiikka
def alarm():
    while button.value():  # Odottaa painiketta sammutukseen
        led_red.value(1)
        play_buzzer()
        start_motor()
        time.sleep(0.5)
        led_red.value(0)
        time.sleep(0.5)
    stop_motor()

# Function to measure distance
def measure_distance():
    TRIG.value(0)
    time.sleep_us(2)
    TRIG.value(1)
    time.sleep_us(10)
    TRIG.value(0)

    while ECHO.value() == 0:
        start = time.ticks_us()

    while ECHO.value() == 1:
        end = time.ticks_us()

    duration = time.ticks_diff(end, start)
    distance = (duration * 0.0343) / 2  # cm
    return distance

# Servon ohjaus
servo = machine.PWM(machine.Pin(xx))
servo.freq(50)

# DC-moottorin ohjaus
motor_in1 = machine.Pin(xx, machine.Pin.OUT)
motor_in2 = machine.Pin(xx, machine.Pin.OUT)

def move_servo(angle):
    duty = int((angle / 180.0) * 2000 + 500)  # Muunna kulma PWM-signaaliksi
    servo.duty_u16(duty)
    time.sleep(1)

def rotate_motor(direction):
    if direction == "forward":
        motor_in1.value(1)
        motor_in2.value(0)
    elif direction == "backward":
        motor_in1.value(0)
        motor_in2.value(1)
    else:  # Pysäytä moottori
        motor_in1.value(0)
        motor_in2.value(0)

# Pääohjelma

while True:
    alarm()

    # Ohjaa servoa
    move_servo(0)     # Siirrä 0 asteeseen
    time.sleep(1)
    move_servo(90)    # Siirrä 90 asteeseen
    time.sleep(1)
    
    # Pyöritä moottoria
    rotate_motor("forward")
    time.sleep(2)
    rotate_motor("backward")
    time.sleep(2)
    rotate_motor("stop")
    time.sleep(1)

    distance = measure_distance():
    if distance < 20:
      stop_motor()
      turn_left()
    else:
      move_forward()

